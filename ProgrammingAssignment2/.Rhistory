x$setinverse(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed),
#then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(matrix(c(1,2,6,9),2,2))
cacheSolve(matrix(c(1,2,6,9),2,2))
matrix(c(1,2,6,9),2,2)
solve(matrix(c(1,2,6,9),2,2))
cacheSolve(matrix(c(1,2,6,9),2,2))
class(makeCacheMatrix())
cacheSolve(matrix(c(1,2,6,9),2,2))
makeCacheMatrix(matrix(c(1,2,6,9),2,2))
cacheSolve(matrix(c(1,2,6,9),2,2))
matrix<-makeCacheMatrix(matrix(c(1,2,6,9),2,2))
cacheSolve(matrix)
cacheSolve(matrix)
